"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/YearPage/[year]/page",{

/***/ "(app-pages-browser)/./app/(components)/StatusDisplay.jsx":
/*!********************************************!*\
  !*** ./app/(components)/StatusDisplay.jsx ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n\nconst StatusDisplay = (param)=>{\n    let { status } = param;\n    const getColor = (status)=>{\n        let color = \"bg-slate-700\";\n        switch(status.toLowerCase()){\n            case \"done\":\n                color = \"bg-green-200\";\n                return color;\n            case \"started\":\n                color = \"bg-yellow-200\";\n                return color;\n            case \"estimated\":\n                color = \"bg-blue-200\";\n                return color;\n            case \"not started\":\n                color = \"bg-red-200\";\n                return color;\n        }\n        return color;\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n        className: \"inline-block rounded-full px-2 py-1 text-xs font-semibold text-gray-700 capitalize \".concat(getColor(status)),\n        children: status\n    }, void 0, false, {\n        fileName: \"/Users/kerst1/Documents/Challanges/Ticket/app/(components)/StatusDisplay.jsx\",\n        lineNumber: 23,\n        columnNumber: 5\n    }, undefined);\n};\n_c = StatusDisplay;\n/* harmony default export */ __webpack_exports__[\"default\"] = (StatusDisplay);\nvar _c;\n$RefreshReg$(_c, \"StatusDisplay\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC8oY29tcG9uZW50cykvU3RhdHVzRGlzcGxheS5qc3giLCJtYXBwaW5ncyI6Ijs7O0FBQUEsTUFBTUEsZ0JBQWdCO1FBQUMsRUFBRUMsTUFBTSxFQUFFO0lBQy9CLE1BQU1DLFdBQVcsQ0FBQ0Q7UUFDaEIsSUFBSUUsUUFBUTtRQUNaLE9BQVFGLE9BQU9HLFdBQVc7WUFDeEIsS0FBSztnQkFDSEQsUUFBUTtnQkFDUixPQUFPQTtZQUNULEtBQUs7Z0JBQ0hBLFFBQVE7Z0JBQ1IsT0FBT0E7WUFFVCxLQUFLO2dCQUNIQSxRQUFRO2dCQUNSLE9BQU9BO1lBQ1QsS0FBSztnQkFDSEEsUUFBUTtnQkFDUixPQUFPQTtRQUNYO1FBQ0EsT0FBT0E7SUFDVDtJQUVBLHFCQUNFLDhEQUFDRTtRQUNDQyxXQUFXLHNGQUVULE9BRitGSixTQUMvRkQ7a0JBR0RBOzs7Ozs7QUFHUDtLQTlCTUQ7QUFnQ04sK0RBQWVBLGFBQWFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwLyhjb21wb25lbnRzKS9TdGF0dXNEaXNwbGF5LmpzeD82ZjA3Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFN0YXR1c0Rpc3BsYXkgPSAoeyBzdGF0dXMgfSkgPT4ge1xuICBjb25zdCBnZXRDb2xvciA9IChzdGF0dXMpID0+IHtcbiAgICBsZXQgY29sb3IgPSAnYmctc2xhdGUtNzAwJztcbiAgICBzd2l0Y2ggKHN0YXR1cy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICBjYXNlICdkb25lJzpcbiAgICAgICAgY29sb3IgPSAnYmctZ3JlZW4tMjAwJztcbiAgICAgICAgcmV0dXJuIGNvbG9yO1xuICAgICAgY2FzZSAnc3RhcnRlZCc6XG4gICAgICAgIGNvbG9yID0gJ2JnLXllbGxvdy0yMDAnO1xuICAgICAgICByZXR1cm4gY29sb3I7XG5cbiAgICAgIGNhc2UgJ2VzdGltYXRlZCc6XG4gICAgICAgIGNvbG9yID0gJ2JnLWJsdWUtMjAwJztcbiAgICAgICAgcmV0dXJuIGNvbG9yO1xuICAgICAgY2FzZSAnbm90IHN0YXJ0ZWQnOlxuICAgICAgICBjb2xvciA9ICdiZy1yZWQtMjAwJztcbiAgICAgICAgcmV0dXJuIGNvbG9yO1xuICAgIH1cbiAgICByZXR1cm4gY29sb3I7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8c3BhblxuICAgICAgY2xhc3NOYW1lPXtgaW5saW5lLWJsb2NrIHJvdW5kZWQtZnVsbCBweC0yIHB5LTEgdGV4dC14cyBmb250LXNlbWlib2xkIHRleHQtZ3JheS03MDAgY2FwaXRhbGl6ZSAke2dldENvbG9yKFxuICAgICAgICBzdGF0dXNcbiAgICAgICl9YH1cbiAgICA+XG4gICAgICB7c3RhdHVzfVxuICAgIDwvc3Bhbj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXR1c0Rpc3BsYXk7XG4iXSwibmFtZXMiOlsiU3RhdHVzRGlzcGxheSIsInN0YXR1cyIsImdldENvbG9yIiwiY29sb3IiLCJ0b0xvd2VyQ2FzZSIsInNwYW4iLCJjbGFzc05hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/(components)/StatusDisplay.jsx\n"));

/***/ })

});